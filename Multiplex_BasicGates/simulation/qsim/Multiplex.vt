// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/08/2022 13:27:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Multi21_8bits
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Multi21_8bits_vlg_sample_tst(
	d0,
	d1,
	s,
	sampler_tx
);
input [7:0] d0;
input [7:0] d1;
input  s;
output sampler_tx;

reg sample;
time current_time;
always @(d0 or d1 or s)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Multi21_8bits_vlg_check_tst (
	data_out,
	sampler_rx
);
input [7:0] data_out;
input sampler_rx;

reg [7:0] data_out_expected;

reg [7:0] data_out_prev;

reg [7:0] data_out_expected_prev;

reg [7:0] last_data_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	data_out_prev = data_out;
end

// update expected /o prevs

always @(trigger)
begin
	data_out_expected_prev = data_out_expected;
end


// expected data_out[ 7 ]
initial
begin
	data_out_expected[7] = 1'bX;
end 
// expected data_out[ 6 ]
initial
begin
	data_out_expected[6] = 1'bX;
end 
// expected data_out[ 5 ]
initial
begin
	data_out_expected[5] = 1'bX;
end 
// expected data_out[ 4 ]
initial
begin
	data_out_expected[4] = 1'bX;
end 
// expected data_out[ 3 ]
initial
begin
	data_out_expected[3] = 1'bX;
end 
// expected data_out[ 2 ]
initial
begin
	data_out_expected[2] = 1'bX;
end 
// expected data_out[ 1 ]
initial
begin
	data_out_expected[1] = 1'bX;
end 
// expected data_out[ 0 ]
initial
begin
	data_out_expected[0] = 1'bX;
end 
// generate trigger
always @(data_out_expected or data_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected data_out = %b | ",data_out_expected_prev);
	$display("| real data_out = %b | ",data_out_prev);
`endif
	if (
		( data_out_expected_prev[0] !== 1'bx ) && ( data_out_prev[0] !== data_out_expected_prev[0] )
		&& ((data_out_expected_prev[0] !== last_data_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[0] = data_out_expected_prev[0];
	end
	if (
		( data_out_expected_prev[1] !== 1'bx ) && ( data_out_prev[1] !== data_out_expected_prev[1] )
		&& ((data_out_expected_prev[1] !== last_data_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[1] = data_out_expected_prev[1];
	end
	if (
		( data_out_expected_prev[2] !== 1'bx ) && ( data_out_prev[2] !== data_out_expected_prev[2] )
		&& ((data_out_expected_prev[2] !== last_data_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[2] = data_out_expected_prev[2];
	end
	if (
		( data_out_expected_prev[3] !== 1'bx ) && ( data_out_prev[3] !== data_out_expected_prev[3] )
		&& ((data_out_expected_prev[3] !== last_data_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[3] = data_out_expected_prev[3];
	end
	if (
		( data_out_expected_prev[4] !== 1'bx ) && ( data_out_prev[4] !== data_out_expected_prev[4] )
		&& ((data_out_expected_prev[4] !== last_data_out_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[4] = data_out_expected_prev[4];
	end
	if (
		( data_out_expected_prev[5] !== 1'bx ) && ( data_out_prev[5] !== data_out_expected_prev[5] )
		&& ((data_out_expected_prev[5] !== last_data_out_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[5] = data_out_expected_prev[5];
	end
	if (
		( data_out_expected_prev[6] !== 1'bx ) && ( data_out_prev[6] !== data_out_expected_prev[6] )
		&& ((data_out_expected_prev[6] !== last_data_out_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[6] = data_out_expected_prev[6];
	end
	if (
		( data_out_expected_prev[7] !== 1'bx ) && ( data_out_prev[7] !== data_out_expected_prev[7] )
		&& ((data_out_expected_prev[7] !== last_data_out_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port data_out[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", data_out_expected_prev);
		$display ("     Real value = %b", data_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_data_out_exp[7] = data_out_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Multi21_8bits_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] d0;
reg [7:0] d1;
reg s;
// wires                                               
wire [7:0] data_out;

wire sampler;                             

// assign statements (if any)                          
Multi21_8bits i1 (
// port map - connection between master ports and signals/registers   
	.d0(d0),
	.d1(d1),
	.data_out(data_out),
	.s(s)
);
// d0[ 7 ]
initial
begin
	d0[7] = 1'b0;
	d0[7] = #10000 1'b1;
	d0[7] = #160000 1'b0;
end 
// d0[ 6 ]
initial
begin
	d0[6] = 1'b0;
	d0[6] = #10000 1'b1;
	d0[6] = #160000 1'b0;
end 
// d0[ 5 ]
initial
begin
	d0[5] = 1'b0;
	d0[5] = #10000 1'b1;
	d0[5] = #160000 1'b0;
	d0[5] = #40000 1'b1;
	d0[5] = #180000 1'b0;
end 
// d0[ 4 ]
initial
begin
	d0[4] = 1'b0;
	d0[4] = #10000 1'b1;
	d0[4] = #160000 1'b0;
end 
// d0[ 3 ]
initial
begin
	d0[3] = 1'b0;
	d0[3] = #10000 1'b1;
	d0[3] = #160000 1'b0;
end 
// d0[ 2 ]
initial
begin
	d0[2] = 1'b0;
	d0[2] = #10000 1'b1;
	d0[2] = #160000 1'b0;
end 
// d0[ 1 ]
initial
begin
	d0[1] = 1'b0;
	d0[1] = #10000 1'b1;
	d0[1] = #160000 1'b0;
end 
// d0[ 0 ]
initial
begin
	d0[0] = 1'b0;
	d0[0] = #10000 1'b1;
	d0[0] = #160000 1'b0;
end 
// d1[ 7 ]
initial
begin
	d1[7] = 1'b0;
end 
// d1[ 6 ]
initial
begin
	d1[6] = 1'b0;
	d1[6] = #390000 1'b1;
	d1[6] = #250000 1'b0;
end 
// d1[ 5 ]
initial
begin
	d1[5] = 1'b0;
	d1[5] = #390000 1'b1;
	d1[5] = #250000 1'b0;
end 
// d1[ 4 ]
initial
begin
	d1[4] = 1'b0;
	d1[4] = #390000 1'b1;
	d1[4] = #250000 1'b0;
end 
// d1[ 3 ]
initial
begin
	d1[3] = 1'b0;
end 
// d1[ 2 ]
initial
begin
	d1[2] = 1'b0;
end 
// d1[ 1 ]
initial
begin
	d1[1] = 1'b0;
end 
// d1[ 0 ]
initial
begin
	d1[0] = 1'b0;
end 

// s
initial
begin
	s = 1'b0;
	s = #390000 1'b1;
	s = #250000 1'b0;
end 

Multi21_8bits_vlg_sample_tst tb_sample (
	.d0(d0),
	.d1(d1),
	.s(s),
	.sampler_tx(sampler)
);

Multi21_8bits_vlg_check_tst tb_out(
	.data_out(data_out),
	.sampler_rx(sampler)
);
endmodule

